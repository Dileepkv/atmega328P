   1               		.file	"port.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 130               	.global	pxPortInitialiseStack
 132               	pxPortInitialiseStack:
 133               		.stabd	46,0,0
   1:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
   2:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     All rights reserved
   4:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
   5:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
   7:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
   9:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  13:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	***************************************************************************
  14:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	***************************************************************************
  19:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  20:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  25:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     ***************************************************************************
  26:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *                                                                       *
  27:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *                                                                       *
  32:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *                                                                       *
  37:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     ***************************************************************************
  38:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  39:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	defined configASSERT()?
  42:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  43:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	embedded software for free we request you assist our global community by
  45:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	participating in the support forum.
  46:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  47:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  52:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  56:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  59:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  63:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  67:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     1 tab == 4 spaces!
  68:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** */
  69:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  70:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* 
  71:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  72:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** Changes from V2.6.0
  73:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  74:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	+ AVR port - Replaced the inb() and outb() functions with direct memory
  75:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	  access.  This allows the port to be built with the 20050414 build of
  76:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	  WinAVR.
  77:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** */
  78:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  79:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #include <stdlib.h>
  80:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #include <avr/interrupt.h>
  81:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  82:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #include "FreeRTOS.h"
  83:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #include "task.h"
  84:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  85:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------
  86:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Implementation of functions defined in portable.h for the AVR port.
  87:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  *----------------------------------------------------------*/
  88:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  89:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* Start tasks with interrupts enables. */
  90:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portFLAGS_INT_ENABLED					( ( StackType_t ) 0x80 )
  91:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  92:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* Hardware constants for timer 1. */
  93:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portCLEAR_COUNTER_ON_MATCH              ( ( unsigned char ) _BV(WGM12) )
  94:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portPRESCALE_64                         ( ( unsigned char ) (_BV(CS11) | _BV(CS10)) )
  95:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portCLOCK_PRESCALER						( ( uint32_t ) 64 )
  96:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portCOMPARE_MATCH_A_INTERRUPT_ENABLE    ( ( unsigned char ) _BV(OCIE1A) )
  97:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
  98:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  99:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* We require the address of the pxCurrentTCB variable, but don't want to know
 100:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** any details of its type. */
 101:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** typedef void TCB_t;
 102:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** extern volatile TCB_t * volatile pxCurrentTCB;
 103:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 104:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 105:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 106:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* 
 107:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Macro to save all the general purpose registers, the save the stack pointer
 108:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * into the TCB.  
 109:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * 
 110:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * The first thing we do is save the flags then disable interrupts.  This is to 
 111:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * guard our stack against having a context switch interrupt after we have already 
 112:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * pushed the registers onto the stack - causing the 32 registers to be on the 
 113:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * stack twice. 
 114:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * 
 115:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * r1 is set to zero as the compiler expects it to be thus, however some
 116:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * of the math routines make use of R1. 
 117:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * 
 118:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * The interrupts will have been disabled during the call to portSAVE_CONTEXT()
 119:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * so we need not worry about reading/writing to the stack pointer. 
 120:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 121:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 122:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portSAVE_CONTEXT()									\
 123:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile (	"push	r0						\n\t"	\
 124:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"in		r0, __SREG__			\n\t"	\
 125:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"cli							\n\t"	\
 126:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r0						\n\t"	\
 127:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r1						\n\t"	\
 128:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"clr	r1						\n\t"	\
 129:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r2						\n\t"	\
 130:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r3						\n\t"	\
 131:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r4						\n\t"	\
 132:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r5						\n\t"	\
 133:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r6						\n\t"	\
 134:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r7						\n\t"	\
 135:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r8						\n\t"	\
 136:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r9						\n\t"	\
 137:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r10						\n\t"	\
 138:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r11						\n\t"	\
 139:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r12						\n\t"	\
 140:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r13						\n\t"	\
 141:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r14						\n\t"	\
 142:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r15						\n\t"	\
 143:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r16						\n\t"	\
 144:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r17						\n\t"	\
 145:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r18						\n\t"	\
 146:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r19						\n\t"	\
 147:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r20						\n\t"	\
 148:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r21						\n\t"	\
 149:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r22						\n\t"	\
 150:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r23						\n\t"	\
 151:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r24						\n\t"	\
 152:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r25						\n\t"	\
 153:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r26						\n\t"	\
 154:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r27						\n\t"	\
 155:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r28						\n\t"	\
 156:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r29						\n\t"	\
 157:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r30						\n\t"	\
 158:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r31						\n\t"	\
 159:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"lds	r26, pxCurrentTCB		\n\t"	\
 160:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"lds	r27, pxCurrentTCB + 1	\n\t"	\
 161:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"in		r0, 0x3d				\n\t"	\
 162:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"st		x+, r0					\n\t"	\
 163:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"in		r0, 0x3e				\n\t"	\
 164:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"st		x+, r0					\n\t"	\
 165:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 				);
 166:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 167:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* 
 168:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Opposite to portSAVE_CONTEXT().  Interrupts will have been disabled during
 169:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * the context save so we can write to the stack pointer. 
 170:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 171:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 172:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portRESTORE_CONTEXT()								\
 173:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile (	"lds	r26, pxCurrentTCB		\n\t"	\
 174:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"lds	r27, pxCurrentTCB + 1	\n\t"	\
 175:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"ld		r28, x+					\n\t"	\
 176:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"out	__SP_L__, r28			\n\t"	\
 177:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"ld		r29, x+					\n\t"	\
 178:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"out	__SP_H__, r29			\n\t"	\
 179:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r31						\n\t"	\
 180:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r30						\n\t"	\
 181:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r29						\n\t"	\
 182:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r28						\n\t"	\
 183:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r27						\n\t"	\
 184:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r26						\n\t"	\
 185:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r25						\n\t"	\
 186:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r24						\n\t"	\
 187:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r23						\n\t"	\
 188:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r22						\n\t"	\
 189:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r21						\n\t"	\
 190:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r20						\n\t"	\
 191:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r19						\n\t"	\
 192:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r18						\n\t"	\
 193:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r17						\n\t"	\
 194:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r16						\n\t"	\
 195:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r15						\n\t"	\
 196:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r14						\n\t"	\
 197:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r13						\n\t"	\
 198:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r12						\n\t"	\
 199:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r11						\n\t"	\
 200:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r10						\n\t"	\
 201:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r9						\n\t"	\
 202:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r8						\n\t"	\
 203:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r7						\n\t"	\
 204:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r6						\n\t"	\
 205:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r5						\n\t"	\
 206:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r4						\n\t"	\
 207:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r3						\n\t"	\
 208:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r2						\n\t"	\
 209:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r1						\n\t"	\
 210:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r0						\n\t"	\
 211:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"out	__SREG__, r0			\n\t"	\
 212:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r0						\n\t"	\
 213:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 				);
 214:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 215:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 216:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 217:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
 218:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Perform hardware setup to enable ticks from timer 1, compare match A.
 219:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 220:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** static void prvSetupTimerInterrupt( void );
 221:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 222:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 223:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* 
 224:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * See header file for description. 
 225:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 226:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 227:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 135               	.LM0:
 136               	.LFBB1:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
 228:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** uint16_t usAddress;
 229:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 230:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Place a few bytes of known values on the bottom of the stack. 
 231:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	This is just useful for debugging. */
 232:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 233:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = 0x11;
 142               	.LM1:
 143 0000 31E1      		ldi r19,lo8(17)
 144 0002 FC01      		movw r30,r24
 145 0004 3083      		st Z,r19
 234:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 235:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = 0x22;
 147               	.LM2:
 148 0006 3197      		sbiw r30,1
 149 0008 22E2      		ldi r18,lo8(34)
 150 000a 2083      		st Z,r18
 236:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 237:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = 0x33;
 152               	.LM3:
 153 000c FC01      		movw r30,r24
 154 000e 3297      		sbiw r30,2
 155 0010 A3E3      		ldi r26,lo8(51)
 156 0012 A083      		st Z,r26
 238:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 239:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 240:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Simulate how the stack would look after a call to vPortYield() generated by 
 241:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	the compiler. */
 242:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 243:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */
 244:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 245:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* The start of the task code will be popped off the stack last, so place
 246:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	it on first. */
 247:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	usAddress = ( uint16_t ) pxCode;
 248:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
 158               	.LM4:
 159 0014 FC01      		movw r30,r24
 160 0016 3397      		sbiw r30,3
 161 0018 6083      		st Z,r22
 249:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 250:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 251:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	usAddress >>= 8;
 252:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
 163               	.LM5:
 164 001a FC01      		movw r30,r24
 165 001c 3497      		sbiw r30,4
 166 001e 7083      		st Z,r23
 253:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 254:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 255:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
 256:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT places the flags on the stack immediately after r0
 257:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	to ensure the interrupts get disabled as soon as possible, and so ensuring
 258:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	the stack use is minimal should a context switch interrupt occur. */
 259:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
 168               	.LM6:
 169 0020 FC01      		movw r30,r24
 170 0022 3597      		sbiw r30,5
 171 0024 1082      		st Z,__zero_reg__
 260:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 261:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = portFLAGS_INT_ENABLED;
 173               	.LM7:
 174 0026 FC01      		movw r30,r24
 175 0028 3697      		sbiw r30,6
 176 002a 60E8      		ldi r22,lo8(-128)
 177 002c 6083      		st Z,r22
 262:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 263:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 264:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 265:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Now the remaining registers.   The compiler expects R1 to be 0. */
 266:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
 179               	.LM8:
 180 002e FC01      		movw r30,r24
 181 0030 3797      		sbiw r30,7
 182 0032 1082      		st Z,__zero_reg__
 267:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 268:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
 184               	.LM9:
 185 0034 FC01      		movw r30,r24
 186 0036 3897      		sbiw r30,8
 187 0038 62E0      		ldi r22,lo8(2)
 188 003a 6083      		st Z,r22
 269:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 270:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
 190               	.LM10:
 191 003c FC01      		movw r30,r24
 192 003e 3997      		sbiw r30,9
 193 0040 63E0      		ldi r22,lo8(3)
 194 0042 6083      		st Z,r22
 271:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 272:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
 196               	.LM11:
 197 0044 FC01      		movw r30,r24
 198 0046 3A97      		sbiw r30,10
 199 0048 64E0      		ldi r22,lo8(4)
 200 004a 6083      		st Z,r22
 273:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 274:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
 202               	.LM12:
 203 004c FC01      		movw r30,r24
 204 004e 3B97      		sbiw r30,11
 205 0050 65E0      		ldi r22,lo8(5)
 206 0052 6083      		st Z,r22
 275:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 276:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
 208               	.LM13:
 209 0054 FC01      		movw r30,r24
 210 0056 3C97      		sbiw r30,12
 211 0058 66E0      		ldi r22,lo8(6)
 212 005a 6083      		st Z,r22
 277:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 278:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
 214               	.LM14:
 215 005c FC01      		movw r30,r24
 216 005e 3D97      		sbiw r30,13
 217 0060 67E0      		ldi r22,lo8(7)
 218 0062 6083      		st Z,r22
 279:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 280:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
 220               	.LM15:
 221 0064 FC01      		movw r30,r24
 222 0066 3E97      		sbiw r30,14
 223 0068 68E0      		ldi r22,lo8(8)
 224 006a 6083      		st Z,r22
 281:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 282:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
 226               	.LM16:
 227 006c FC01      		movw r30,r24
 228 006e 3F97      		sbiw r30,15
 229 0070 69E0      		ldi r22,lo8(9)
 230 0072 6083      		st Z,r22
 283:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 284:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
 232               	.LM17:
 233 0074 FC01      		movw r30,r24
 234 0076 7097      		sbiw r30,16
 235 0078 60E1      		ldi r22,lo8(16)
 236 007a 6083      		st Z,r22
 285:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 286:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
 238               	.LM18:
 239 007c FC01      		movw r30,r24
 240 007e 7197      		sbiw r30,17
 241 0080 3083      		st Z,r19
 287:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 288:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
 243               	.LM19:
 244 0082 FC01      		movw r30,r24
 245 0084 7297      		sbiw r30,18
 246 0086 32E1      		ldi r19,lo8(18)
 247 0088 3083      		st Z,r19
 289:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 290:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
 249               	.LM20:
 250 008a FC01      		movw r30,r24
 251 008c 7397      		sbiw r30,19
 252 008e 33E1      		ldi r19,lo8(19)
 253 0090 3083      		st Z,r19
 291:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 292:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
 255               	.LM21:
 256 0092 FC01      		movw r30,r24
 257 0094 7497      		sbiw r30,20
 258 0096 34E1      		ldi r19,lo8(20)
 259 0098 3083      		st Z,r19
 293:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 294:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
 261               	.LM22:
 262 009a FC01      		movw r30,r24
 263 009c 7597      		sbiw r30,21
 264 009e 35E1      		ldi r19,lo8(21)
 265 00a0 3083      		st Z,r19
 295:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 296:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
 267               	.LM23:
 268 00a2 FC01      		movw r30,r24
 269 00a4 7697      		sbiw r30,22
 270 00a6 36E1      		ldi r19,lo8(22)
 271 00a8 3083      		st Z,r19
 297:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 298:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
 273               	.LM24:
 274 00aa FC01      		movw r30,r24
 275 00ac 7797      		sbiw r30,23
 276 00ae 37E1      		ldi r19,lo8(23)
 277 00b0 3083      		st Z,r19
 299:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 300:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
 279               	.LM25:
 280 00b2 FC01      		movw r30,r24
 281 00b4 7897      		sbiw r30,24
 282 00b6 38E1      		ldi r19,lo8(24)
 283 00b8 3083      		st Z,r19
 301:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 302:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
 285               	.LM26:
 286 00ba FC01      		movw r30,r24
 287 00bc 7997      		sbiw r30,25
 288 00be 39E1      		ldi r19,lo8(25)
 289 00c0 3083      		st Z,r19
 303:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 304:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
 291               	.LM27:
 292 00c2 FC01      		movw r30,r24
 293 00c4 7A97      		sbiw r30,26
 294 00c6 30E2      		ldi r19,lo8(32)
 295 00c8 3083      		st Z,r19
 305:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 306:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
 297               	.LM28:
 298 00ca FC01      		movw r30,r24
 299 00cc 7B97      		sbiw r30,27
 300 00ce 31E2      		ldi r19,lo8(33)
 301 00d0 3083      		st Z,r19
 307:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 308:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
 303               	.LM29:
 304 00d2 FC01      		movw r30,r24
 305 00d4 7C97      		sbiw r30,28
 306 00d6 2083      		st Z,r18
 309:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 310:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
 308               	.LM30:
 309 00d8 FC01      		movw r30,r24
 310 00da 7D97      		sbiw r30,29
 311 00dc 23E2      		ldi r18,lo8(35)
 312 00de 2083      		st Z,r18
 311:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 312:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 313:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Place the parameter on the stack in the expected location. */
 314:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	usAddress = ( uint16_t ) pvParameters;
 315:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
 314               	.LM31:
 315 00e0 FC01      		movw r30,r24
 316 00e2 7E97      		sbiw r30,30
 317 00e4 4083      		st Z,r20
 316:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 317:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 318:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	usAddress >>= 8;
 319:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
 319               	.LM32:
 320 00e6 FC01      		movw r30,r24
 321 00e8 7F97      		sbiw r30,31
 322 00ea 5083      		st Z,r21
 320:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 321:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 322:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
 324               	.LM33:
 325 00ec FC01      		movw r30,r24
 326 00ee B097      		sbiw r30,32
 327 00f0 26E2      		ldi r18,lo8(38)
 328 00f2 2083      		st Z,r18
 323:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 324:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
 330               	.LM34:
 331 00f4 FC01      		movw r30,r24
 332 00f6 B197      		sbiw r30,33
 333 00f8 27E2      		ldi r18,lo8(39)
 334 00fa 2083      		st Z,r18
 325:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 326:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
 336               	.LM35:
 337 00fc FC01      		movw r30,r24
 338 00fe B297      		sbiw r30,34
 339 0100 28E2      		ldi r18,lo8(40)
 340 0102 2083      		st Z,r18
 327:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 328:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
 342               	.LM36:
 343 0104 FC01      		movw r30,r24
 344 0106 B397      		sbiw r30,35
 345 0108 29E2      		ldi r18,lo8(41)
 346 010a 2083      		st Z,r18
 329:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 330:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
 348               	.LM37:
 349 010c FC01      		movw r30,r24
 350 010e B497      		sbiw r30,36
 351 0110 20E3      		ldi r18,lo8(48)
 352 0112 2083      		st Z,r18
 331:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 332:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
 354               	.LM38:
 355 0114 FC01      		movw r30,r24
 356 0116 B597      		sbiw r30,37
 357 0118 21E3      		ldi r18,lo8(49)
 358 011a 2083      		st Z,r18
 333:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 334:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 335:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/*lint +e950 +e611 +e923 */
 336:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 337:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	return pxTopOfStack;
 360               	.LM39:
 361 011c 9C01      		movw r18,r24
 362 011e 2652      		subi r18,38
 363 0120 3109      		sbc r19,__zero_reg__
 338:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 365               	.LM40:
 366 0122 C901      		movw r24,r18
 367 0124 0895      		ret
 369               	.Lscope1:
 371               		.stabd	78,0,0
 373               	.global	xPortStartScheduler
 375               	xPortStartScheduler:
 376               		.stabd	46,0,0
 339:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 340:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 341:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** BaseType_t xPortStartScheduler( void )
 342:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 378               	.LM41:
 379               	.LFBB2:
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
 384               	.LBB4:
 385               	.LBB5:
 343:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Setup the hardware to generate the tick. */
 344:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	prvSetupTimerInterrupt();
 345:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 346:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Restore the context of the first task that is going to run. */
 347:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 348:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 349:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Simulate a function call end as generated by the compiler.  We will now
 350:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	jump to the start of the task the context of which we have just restored. */
 351:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile ( "ret" );
 352:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 353:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Should not get here. */
 354:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	return pdTRUE;
 355:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 356:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 357:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 358:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortEndScheduler( void )
 359:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 360:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* It is unlikely that the AVR port will get stopped.  If required simply
 361:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	disable the tick interrupt here. */
 362:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 363:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 364:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 365:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
 366:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Manual context switch.  The first thing we do is save the registers so we
 367:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * can use a naked attribute.
 368:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 369:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortYield( void ) __attribute__ ( ( naked ) );
 370:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortYield( void )
 371:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 372:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT();
 373:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	vTaskSwitchContext();
 374:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 375:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 376:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile ( "ret" );
 377:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 378:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 379:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 380:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
 381:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Context switch function used by the tick.  This must be identical to 
 382:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
 383:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * difference from vPortYield() is the tick count is incremented as the
 384:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * call comes from the tick ISR.
 385:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 386:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
 387:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortYieldFromTick( void )
 388:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 389:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT();
 390:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	if( xTaskIncrementTick() != pdFALSE )
 391:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	{
 392:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 		vTaskSwitchContext();
 393:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	}
 394:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 395:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 396:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile ( "ret" );
 397:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 398:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 399:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 400:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
 401:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Setup timer 1 compare match A to generate a tick interrupt.
 402:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 403:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** static void prvSetupTimerInterrupt( void )
 404:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 405:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** uint32_t ulCompareMatch;
 406:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** unsigned char ucLowByte;
 407:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 408:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
 409:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	selected for the configCPU_CLOCK_HZ clock. */
 410:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 411:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
 412:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 413:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* We only have 16 bits so have to scale to get our required tick rate. */
 414:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ulCompareMatch /= portCLOCK_PRESCALER;
 415:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 416:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Adjust for correct value. */
 417:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ulCompareMatch -= ( uint32_t ) 1;
 418:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 419:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Setup compare match value for compare match A.  Interrupts are disabled 
 420:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	before this is called so we need not worry here. */
 421:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** OCR1A = ulCompareMatch;
 387               	.LM42:
 388 0126 89EF      		ldi r24,lo8(-7)
 389 0128 90E0      		ldi r25,0
 390 012a 9093 8900 		sts 136+1,r25
 391 012e 8093 8800 		sts 136,r24
 422:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 423:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Setup clock source and compare match behaviour. */
 424:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	TCCR1A &= ~(_BV(WGM11) | _BV(WGM10));;
 393               	.LM43:
 394 0132 E0E8      		ldi r30,lo8(-128)
 395 0134 F0E0      		ldi r31,0
 396 0136 8081      		ld r24,Z
 397 0138 8C7F      		andi r24,lo8(-4)
 398 013a 8083      		st Z,r24
 425:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
 426:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	TCCR1B = ucLowByte;
 400               	.LM44:
 401 013c 8BE0      		ldi r24,lo8(11)
 402 013e 8093 8100 		sts 129,r24
 427:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 428:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Enable the interrupt - this is okay as interrupt are currently globally
 429:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	disabled. */
 430:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ucLowByte = TIMSK1;
 404               	.LM45:
 405 0142 EFE6      		ldi r30,lo8(111)
 406 0144 F0E0      		ldi r31,0
 407 0146 8081      		ld r24,Z
 431:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
 409               	.LM46:
 410 0148 8260      		ori r24,lo8(2)
 432:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	TIMSK1 = ucLowByte;
 412               	.LM47:
 413 014a 8083      		st Z,r24
 414               	.LBE5:
 415               	.LBE4:
 347:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 417               	.LM48:
 418               	/* #APP */
 419               	 ;  347 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 420 014c A091 0000 		lds	r26, pxCurrentTCB		
 421 0150 B091 0000 		lds	r27, pxCurrentTCB + 1	
 422 0154 CD91      		ld		r28, x+					
 423 0156 CDBF      		out	__SP_L__, r28			
 424 0158 DD91      		ld		r29, x+					
 425 015a DEBF      		out	__SP_H__, r29			
 426 015c FF91      		pop	r31						
 427 015e EF91      		pop	r30						
 428 0160 DF91      		pop	r29						
 429 0162 CF91      		pop	r28						
 430 0164 BF91      		pop	r27						
 431 0166 AF91      		pop	r26						
 432 0168 9F91      		pop	r25						
 433 016a 8F91      		pop	r24						
 434 016c 7F91      		pop	r23						
 435 016e 6F91      		pop	r22						
 436 0170 5F91      		pop	r21						
 437 0172 4F91      		pop	r20						
 438 0174 3F91      		pop	r19						
 439 0176 2F91      		pop	r18						
 440 0178 1F91      		pop	r17						
 441 017a 0F91      		pop	r16						
 442 017c FF90      		pop	r15						
 443 017e EF90      		pop	r14						
 444 0180 DF90      		pop	r13						
 445 0182 CF90      		pop	r12						
 446 0184 BF90      		pop	r11						
 447 0186 AF90      		pop	r10						
 448 0188 9F90      		pop	r9						
 449 018a 8F90      		pop	r8						
 450 018c 7F90      		pop	r7						
 451 018e 6F90      		pop	r6						
 452 0190 5F90      		pop	r5						
 453 0192 4F90      		pop	r4						
 454 0194 3F90      		pop	r3						
 455 0196 2F90      		pop	r2						
 456 0198 1F90      		pop	r1						
 457 019a 0F90      		pop	r0						
 458 019c 0FBE      		out	__SREG__, r0			
 459 019e 0F90      		pop	r0						
 460               		
 461               	 ;  0 "" 2
 351:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile ( "ret" );
 463               	.LM49:
 464               	 ;  351 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 465 01a0 0895      		ret
 466               	 ;  0 "" 2
 355:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 468               	.LM50:
 469               	/* #NOAPP */
 470 01a2 81E0      		ldi r24,lo8(1)
 471 01a4 0895      		ret
 473               	.Lscope2:
 475               		.stabd	78,0,0
 477               	.global	vPortEndScheduler
 479               	vPortEndScheduler:
 480               		.stabd	46,0,0
 359:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 482               	.LM51:
 483               	.LFBB3:
 484               	/* prologue: function */
 485               	/* frame size = 0 */
 486               	/* stack size = 0 */
 487               	.L__stack_usage = 0
 488 01a6 0895      		ret
 490               	.Lscope3:
 492               		.stabd	78,0,0
 494               	.global	vPortYield
 496               	vPortYield:
 497               		.stabd	46,0,0
 371:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 499               	.LM52:
 500               	.LFBB4:
 501               	/* prologue: naked */
 502               	/* frame size = 0 */
 503               	/* stack size = 0 */
 504               	.L__stack_usage = 0
 372:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT();
 506               	.LM53:
 507               	/* #APP */
 508               	 ;  372 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 509 01a8 0F92      		push	r0						
 510 01aa 0FB6      		in		r0, __SREG__			
 511 01ac F894      		cli							
 512 01ae 0F92      		push	r0						
 513 01b0 1F92      		push	r1						
 514 01b2 1124      		clr	r1						
 515 01b4 2F92      		push	r2						
 516 01b6 3F92      		push	r3						
 517 01b8 4F92      		push	r4						
 518 01ba 5F92      		push	r5						
 519 01bc 6F92      		push	r6						
 520 01be 7F92      		push	r7						
 521 01c0 8F92      		push	r8						
 522 01c2 9F92      		push	r9						
 523 01c4 AF92      		push	r10						
 524 01c6 BF92      		push	r11						
 525 01c8 CF92      		push	r12						
 526 01ca DF92      		push	r13						
 527 01cc EF92      		push	r14						
 528 01ce FF92      		push	r15						
 529 01d0 0F93      		push	r16						
 530 01d2 1F93      		push	r17						
 531 01d4 2F93      		push	r18						
 532 01d6 3F93      		push	r19						
 533 01d8 4F93      		push	r20						
 534 01da 5F93      		push	r21						
 535 01dc 6F93      		push	r22						
 536 01de 7F93      		push	r23						
 537 01e0 8F93      		push	r24						
 538 01e2 9F93      		push	r25						
 539 01e4 AF93      		push	r26						
 540 01e6 BF93      		push	r27						
 541 01e8 CF93      		push	r28						
 542 01ea DF93      		push	r29						
 543 01ec EF93      		push	r30						
 544 01ee FF93      		push	r31						
 545 01f0 A091 0000 		lds	r26, pxCurrentTCB		
 546 01f4 B091 0000 		lds	r27, pxCurrentTCB + 1	
 547 01f8 0DB6      		in		r0, 0x3d				
 548 01fa 0D92      		st		x+, r0					
 549 01fc 0EB6      		in		r0, 0x3e				
 550 01fe 0D92      		st		x+, r0					
 551               		
 552               	 ;  0 "" 2
 373:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	vTaskSwitchContext();
 554               	.LM54:
 555               	/* #NOAPP */
 556 0200 0E94 0000 		call vTaskSwitchContext
 374:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 558               	.LM55:
 559               	/* #APP */
 560               	 ;  374 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 561 0204 A091 0000 		lds	r26, pxCurrentTCB		
 562 0208 B091 0000 		lds	r27, pxCurrentTCB + 1	
 563 020c CD91      		ld		r28, x+					
 564 020e CDBF      		out	__SP_L__, r28			
 565 0210 DD91      		ld		r29, x+					
 566 0212 DEBF      		out	__SP_H__, r29			
 567 0214 FF91      		pop	r31						
 568 0216 EF91      		pop	r30						
 569 0218 DF91      		pop	r29						
 570 021a CF91      		pop	r28						
 571 021c BF91      		pop	r27						
 572 021e AF91      		pop	r26						
 573 0220 9F91      		pop	r25						
 574 0222 8F91      		pop	r24						
 575 0224 7F91      		pop	r23						
 576 0226 6F91      		pop	r22						
 577 0228 5F91      		pop	r21						
 578 022a 4F91      		pop	r20						
 579 022c 3F91      		pop	r19						
 580 022e 2F91      		pop	r18						
 581 0230 1F91      		pop	r17						
 582 0232 0F91      		pop	r16						
 583 0234 FF90      		pop	r15						
 584 0236 EF90      		pop	r14						
 585 0238 DF90      		pop	r13						
 586 023a CF90      		pop	r12						
 587 023c BF90      		pop	r11						
 588 023e AF90      		pop	r10						
 589 0240 9F90      		pop	r9						
 590 0242 8F90      		pop	r8						
 591 0244 7F90      		pop	r7						
 592 0246 6F90      		pop	r6						
 593 0248 5F90      		pop	r5						
 594 024a 4F90      		pop	r4						
 595 024c 3F90      		pop	r3						
 596 024e 2F90      		pop	r2						
 597 0250 1F90      		pop	r1						
 598 0252 0F90      		pop	r0						
 599 0254 0FBE      		out	__SREG__, r0			
 600 0256 0F90      		pop	r0						
 601               		
 602               	 ;  0 "" 2
 376:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile ( "ret" );
 604               	.LM56:
 605               	 ;  376 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 606 0258 0895      		ret
 607               	 ;  0 "" 2
 608               	/* epilogue start */
 377:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 610               	.LM57:
 611               	/* #NOAPP */
 613               	.Lscope4:
 615               		.stabd	78,0,0
 617               	.global	vPortYieldFromTick
 619               	vPortYieldFromTick:
 620               		.stabd	46,0,0
 388:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 622               	.LM58:
 623               	.LFBB5:
 624               	/* prologue: naked */
 625               	/* frame size = 0 */
 626               	/* stack size = 0 */
 627               	.L__stack_usage = 0
 389:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT();
 629               	.LM59:
 630               	/* #APP */
 631               	 ;  389 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 632 025a 0F92      		push	r0						
 633 025c 0FB6      		in		r0, __SREG__			
 634 025e F894      		cli							
 635 0260 0F92      		push	r0						
 636 0262 1F92      		push	r1						
 637 0264 1124      		clr	r1						
 638 0266 2F92      		push	r2						
 639 0268 3F92      		push	r3						
 640 026a 4F92      		push	r4						
 641 026c 5F92      		push	r5						
 642 026e 6F92      		push	r6						
 643 0270 7F92      		push	r7						
 644 0272 8F92      		push	r8						
 645 0274 9F92      		push	r9						
 646 0276 AF92      		push	r10						
 647 0278 BF92      		push	r11						
 648 027a CF92      		push	r12						
 649 027c DF92      		push	r13						
 650 027e EF92      		push	r14						
 651 0280 FF92      		push	r15						
 652 0282 0F93      		push	r16						
 653 0284 1F93      		push	r17						
 654 0286 2F93      		push	r18						
 655 0288 3F93      		push	r19						
 656 028a 4F93      		push	r20						
 657 028c 5F93      		push	r21						
 658 028e 6F93      		push	r22						
 659 0290 7F93      		push	r23						
 660 0292 8F93      		push	r24						
 661 0294 9F93      		push	r25						
 662 0296 AF93      		push	r26						
 663 0298 BF93      		push	r27						
 664 029a CF93      		push	r28						
 665 029c DF93      		push	r29						
 666 029e EF93      		push	r30						
 667 02a0 FF93      		push	r31						
 668 02a2 A091 0000 		lds	r26, pxCurrentTCB		
 669 02a6 B091 0000 		lds	r27, pxCurrentTCB + 1	
 670 02aa 0DB6      		in		r0, 0x3d				
 671 02ac 0D92      		st		x+, r0					
 672 02ae 0EB6      		in		r0, 0x3e				
 673 02b0 0D92      		st		x+, r0					
 674               		
 675               	 ;  0 "" 2
 390:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	if( xTaskIncrementTick() != pdFALSE )
 677               	.LM60:
 678               	/* #NOAPP */
 679 02b2 0E94 0000 		call xTaskIncrementTick
 680 02b6 8111      		cpse r24,__zero_reg__
 392:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 		vTaskSwitchContext();
 682               	.LM61:
 683 02b8 0E94 0000 		call vTaskSwitchContext
 684               	.L6:
 394:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 686               	.LM62:
 687               	/* #APP */
 688               	 ;  394 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 689 02bc A091 0000 		lds	r26, pxCurrentTCB		
 690 02c0 B091 0000 		lds	r27, pxCurrentTCB + 1	
 691 02c4 CD91      		ld		r28, x+					
 692 02c6 CDBF      		out	__SP_L__, r28			
 693 02c8 DD91      		ld		r29, x+					
 694 02ca DEBF      		out	__SP_H__, r29			
 695 02cc FF91      		pop	r31						
 696 02ce EF91      		pop	r30						
 697 02d0 DF91      		pop	r29						
 698 02d2 CF91      		pop	r28						
 699 02d4 BF91      		pop	r27						
 700 02d6 AF91      		pop	r26						
 701 02d8 9F91      		pop	r25						
 702 02da 8F91      		pop	r24						
 703 02dc 7F91      		pop	r23						
 704 02de 6F91      		pop	r22						
 705 02e0 5F91      		pop	r21						
 706 02e2 4F91      		pop	r20						
 707 02e4 3F91      		pop	r19						
 708 02e6 2F91      		pop	r18						
 709 02e8 1F91      		pop	r17						
 710 02ea 0F91      		pop	r16						
 711 02ec FF90      		pop	r15						
 712 02ee EF90      		pop	r14						
 713 02f0 DF90      		pop	r13						
 714 02f2 CF90      		pop	r12						
 715 02f4 BF90      		pop	r11						
 716 02f6 AF90      		pop	r10						
 717 02f8 9F90      		pop	r9						
 718 02fa 8F90      		pop	r8						
 719 02fc 7F90      		pop	r7						
 720 02fe 6F90      		pop	r6						
 721 0300 5F90      		pop	r5						
 722 0302 4F90      		pop	r4						
 723 0304 3F90      		pop	r3						
 724 0306 2F90      		pop	r2						
 725 0308 1F90      		pop	r1						
 726 030a 0F90      		pop	r0						
 727 030c 0FBE      		out	__SREG__, r0			
 728 030e 0F90      		pop	r0						
 729               		
 730               	 ;  0 "" 2
 396:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile ( "ret" );
 732               	.LM63:
 733               	 ;  396 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 734 0310 0895      		ret
 735               	 ;  0 "" 2
 736               	/* epilogue start */
 397:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 738               	.LM64:
 739               	/* #NOAPP */
 741               	.Lscope5:
 743               		.stabd	78,0,0
 745               	.global	__vector_11
 747               	__vector_11:
 748               		.stabd	46,0,0
 433:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 434:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 435:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 436:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #if configUSE_PREEMPTION == 1
 437:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 438:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/*
 439:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	 * Tick ISR for preemptive scheduler.  We can use a naked attribute as
 440:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	 * the context is saved at the start of vPortYieldFromTick().  The tick
 441:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	 * count is incremented after the context is saved.
 442:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	 */
 443:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
 444:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     void TIMER1_COMPA_vect( void )
 445:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	{
 750               	.LM65:
 751               	.LFBB6:
 752               	/* prologue: naked */
 753               	/* frame size = 0 */
 754               	/* stack size = 0 */
 755               	.L__stack_usage = 0
 446:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 		vPortYieldFromTick();
 757               	.LM66:
 758 0312 0E94 0000 		call vPortYieldFromTick
 447:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 		asm volatile ( "reti" );
 760               	.LM67:
 761               	/* #APP */
 762               	 ;  447 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 763 0316 1895      		reti
 764               	 ;  0 "" 2
 765               	/* epilogue start */
 448:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	}
 767               	.LM68:
 768               	/* #NOAPP */
 770               	.Lscope6:
 772               		.stabd	78,0,0
 774               	.Letext0:
 775               		.ident	"GCC: (GNU) 4.7.2"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccTvBz9Q.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccTvBz9Q.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccTvBz9Q.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccTvBz9Q.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccTvBz9Q.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccTvBz9Q.s:132    .text:0000000000000000 pxPortInitialiseStack
     /tmp/ccTvBz9Q.s:375    .text:0000000000000126 xPortStartScheduler
     /tmp/ccTvBz9Q.s:479    .text:00000000000001a6 vPortEndScheduler
     /tmp/ccTvBz9Q.s:496    .text:00000000000001a8 vPortYield
     /tmp/ccTvBz9Q.s:619    .text:000000000000025a vPortYieldFromTick
     /tmp/ccTvBz9Q.s:747    .text:0000000000000312 __vector_11

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
