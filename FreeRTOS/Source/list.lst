   1               		.file	"list.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 111               	.global	vListInitialise
 113               	vListInitialise:
 114               		.stabd	46,0,0
   1:FreeRTOS/Source/list.c **** /*
   2:FreeRTOS/Source/list.c ****     FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:FreeRTOS/Source/list.c ****     All rights reserved
   4:FreeRTOS/Source/list.c **** 
   5:FreeRTOS/Source/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/Source/list.c **** 
   7:FreeRTOS/Source/list.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/Source/list.c **** 
   9:FreeRTOS/Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/Source/list.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:FreeRTOS/Source/list.c **** 
  13:FreeRTOS/Source/list.c **** 	***************************************************************************
  14:FreeRTOS/Source/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/Source/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/Source/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/Source/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/Source/list.c **** 	***************************************************************************
  19:FreeRTOS/Source/list.c **** 
  20:FreeRTOS/Source/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/Source/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/Source/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/Source/list.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/Source/list.c **** 
  25:FreeRTOS/Source/list.c ****     ***************************************************************************
  26:FreeRTOS/Source/list.c ****      *                                                                       *
  27:FreeRTOS/Source/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/Source/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/Source/list.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/Source/list.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/Source/list.c ****      *                                                                       *
  32:FreeRTOS/Source/list.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/Source/list.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/Source/list.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/Source/list.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/Source/list.c ****      *                                                                       *
  37:FreeRTOS/Source/list.c ****     ***************************************************************************
  38:FreeRTOS/Source/list.c **** 
  39:FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/Source/list.c **** 	the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/Source/list.c **** 	defined configASSERT()?
  42:FreeRTOS/Source/list.c **** 
  43:FreeRTOS/Source/list.c **** 	http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/Source/list.c **** 	embedded software for free we request you assist our global community by
  45:FreeRTOS/Source/list.c **** 	participating in the support forum.
  46:FreeRTOS/Source/list.c **** 
  47:FreeRTOS/Source/list.c **** 	http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/Source/list.c **** 	be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/Source/list.c **** 	FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/Source/list.c **** 	Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/Source/list.c **** 
  52:FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/Source/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/Source/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/Source/list.c **** 
  56:FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/Source/list.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/Source/list.c **** 
  59:FreeRTOS/Source/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/Source/list.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/Source/list.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/Source/list.c **** 
  63:FreeRTOS/Source/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/Source/list.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/Source/list.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/Source/list.c **** 
  67:FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  68:FreeRTOS/Source/list.c **** */
  69:FreeRTOS/Source/list.c **** 
  70:FreeRTOS/Source/list.c **** 
  71:FreeRTOS/Source/list.c **** #include <stdlib.h>
  72:FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  73:FreeRTOS/Source/list.c **** #include "list.h"
  74:FreeRTOS/Source/list.c **** 
  75:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  76:FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  77:FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  78:FreeRTOS/Source/list.c **** 
  79:FreeRTOS/Source/list.c **** void vListInitialise( List_t * const pxList )
  80:FreeRTOS/Source/list.c **** {
 116               	.LM0:
 117               	.LFBB1:
 118               	/* prologue: function */
 119               	/* frame size = 0 */
 120               	/* stack size = 0 */
 121               	.L__stack_usage = 0
 122 0000 FC01      		movw r30,r24
  81:FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  82:FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  83:FreeRTOS/Source/list.c **** 	as the only list entry. */
  84:FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
 124               	.LM1:
 125 0002 0396      		adiw r24,3
 126 0004 9283      		std Z+2,r25
 127 0006 8183      		std Z+1,r24
  85:FreeRTOS/Source/list.c **** 
  86:FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  87:FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  88:FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
 129               	.LM2:
 130 0008 2FEF      		ldi r18,lo8(-1)
 131 000a 3FEF      		ldi r19,lo8(-1)
 132 000c 3483      		std Z+4,r19
 133 000e 2383      		std Z+3,r18
  89:FreeRTOS/Source/list.c **** 
  90:FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  91:FreeRTOS/Source/list.c **** 	when the list is empty. */
  92:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
 135               	.LM3:
 136 0010 9683      		std Z+6,r25
 137 0012 8583      		std Z+5,r24
  93:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
 139               	.LM4:
 140 0014 9087      		std Z+8,r25
 141 0016 8783      		std Z+7,r24
  94:FreeRTOS/Source/list.c **** 
  95:FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 143               	.LM5:
 144 0018 1082      		st Z,__zero_reg__
 145 001a 0895      		ret
 147               	.Lscope1:
 149               		.stabd	78,0,0
 152               	.global	vListInitialiseItem
 154               	vListInitialiseItem:
 155               		.stabd	46,0,0
  96:FreeRTOS/Source/list.c **** 
  97:FreeRTOS/Source/list.c **** 	/* Write known values into the list if
  98:FreeRTOS/Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  99:FreeRTOS/Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
 100:FreeRTOS/Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
 101:FreeRTOS/Source/list.c **** }
 102:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 103:FreeRTOS/Source/list.c **** 
 104:FreeRTOS/Source/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
 105:FreeRTOS/Source/list.c **** {
 157               	.LM6:
 158               	.LFBB2:
 159               	/* prologue: function */
 160               	/* frame size = 0 */
 161               	/* stack size = 0 */
 162               	.L__stack_usage = 0
 106:FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
 107:FreeRTOS/Source/list.c **** 	pxItem->pvContainer = NULL;
 164               	.LM7:
 165 001c FC01      		movw r30,r24
 166 001e 1186      		std Z+9,__zero_reg__
 167 0020 1086      		std Z+8,__zero_reg__
 168 0022 0895      		ret
 170               	.Lscope2:
 172               		.stabd	78,0,0
 176               	.global	vListInsertEnd
 178               	vListInsertEnd:
 179               		.stabd	46,0,0
 108:FreeRTOS/Source/list.c **** 
 109:FreeRTOS/Source/list.c **** 	/* Write known values into the list item if
 110:FreeRTOS/Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
 111:FreeRTOS/Source/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 112:FreeRTOS/Source/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 113:FreeRTOS/Source/list.c **** }
 114:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 115:FreeRTOS/Source/list.c **** 
 116:FreeRTOS/Source/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 117:FreeRTOS/Source/list.c **** {
 181               	.LM8:
 182               	.LFBB3:
 183 0024 CF93      		push r28
 184 0026 DF93      		push r29
 185               	/* prologue: function */
 186               	/* frame size = 0 */
 187               	/* stack size = 2 */
 188               	.L__stack_usage = 2
 189 0028 9C01      		movw r18,r24
 190 002a FB01      		movw r30,r22
 118:FreeRTOS/Source/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 192               	.LM9:
 193 002c DC01      		movw r26,r24
 194 002e 1196      		adiw r26,1
 195 0030 CD91      		ld r28,X+
 196 0032 DC91      		ld r29,X
 197 0034 1297      		sbiw r26,1+1
 119:FreeRTOS/Source/list.c **** 
 120:FreeRTOS/Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 121:FreeRTOS/Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 122:FreeRTOS/Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 123:FreeRTOS/Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 124:FreeRTOS/Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 125:FreeRTOS/Source/list.c **** 
 126:FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 127:FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
 128:FreeRTOS/Source/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
 129:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex;
 199               	.LM10:
 200 0036 D383      		std Z+3,r29
 201 0038 C283      		std Z+2,r28
 130:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 203               	.LM11:
 204 003a 8C81      		ldd r24,Y+4
 205 003c 9D81      		ldd r25,Y+5
 206 003e 9583      		std Z+5,r25
 207 0040 8483      		std Z+4,r24
 131:FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 209               	.LM12:
 210 0042 8C81      		ldd r24,Y+4
 211 0044 9D81      		ldd r25,Y+5
 212 0046 DC01      		movw r26,r24
 213 0048 1396      		adiw r26,2+1
 214 004a 7C93      		st X,r23
 215 004c 6E93      		st -X,r22
 216 004e 1297      		sbiw r26,2
 132:FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 218               	.LM13:
 219 0050 7D83      		std Y+5,r23
 220 0052 6C83      		std Y+4,r22
 133:FreeRTOS/Source/list.c **** 
 134:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
 135:FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 222               	.LM14:
 223 0054 3187      		std Z+9,r19
 224 0056 2087      		std Z+8,r18
 136:FreeRTOS/Source/list.c **** 
 137:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 226               	.LM15:
 227 0058 F901      		movw r30,r18
 228 005a 8081      		ld r24,Z
 229 005c 8F5F      		subi r24,lo8(-(1))
 230 005e 8083      		st Z,r24
 231               	/* epilogue start */
 138:FreeRTOS/Source/list.c **** }
 233               	.LM16:
 234 0060 DF91      		pop r29
 235 0062 CF91      		pop r28
 236 0064 0895      		ret
 241               	.Lscope3:
 243               		.stabd	78,0,0
 247               	.global	vListInsert
 249               	vListInsert:
 250               		.stabd	46,0,0
 139:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 140:FreeRTOS/Source/list.c **** 
 141:FreeRTOS/Source/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 142:FreeRTOS/Source/list.c **** {
 252               	.LM17:
 253               	.LFBB4:
 254 0066 0F93      		push r16
 255 0068 1F93      		push r17
 256 006a CF93      		push r28
 257 006c DF93      		push r29
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 4 */
 261               	.L__stack_usage = 4
 262 006e 8C01      		movw r16,r24
 263 0070 FB01      		movw r30,r22
 143:FreeRTOS/Source/list.c **** ListItem_t *pxIterator;
 144:FreeRTOS/Source/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 265               	.LM18:
 266 0072 8081      		ld r24,Z
 267 0074 9181      		ldd r25,Z+1
 145:FreeRTOS/Source/list.c **** 
 146:FreeRTOS/Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 147:FreeRTOS/Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 148:FreeRTOS/Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 149:FreeRTOS/Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 150:FreeRTOS/Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 151:FreeRTOS/Source/list.c **** 
 152:FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 153:FreeRTOS/Source/list.c **** 
 154:FreeRTOS/Source/list.c **** 	If the list already contains a list item with the same item value then the
 155:FreeRTOS/Source/list.c **** 	new list item should be placed after it.  This ensures that TCB's which are
 156:FreeRTOS/Source/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 157:FreeRTOS/Source/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 158:FreeRTOS/Source/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 159:FreeRTOS/Source/list.c **** 	first, and the algorithm slightly modified if necessary. */
 160:FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 269               	.LM19:
 270 0076 8F3F      		cpi r24,-1
 271 0078 2FEF      		ldi r18,-1
 272 007a 9207      		cpc r25,r18
 273 007c 01F4      		brne .L5
 161:FreeRTOS/Source/list.c **** 	{
 162:FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 275               	.LM20:
 276 007e E801      		movw r28,r16
 277 0080 AF81      		ldd r26,Y+7
 278 0082 B885      		ldd r27,Y+8
 279 0084 00C0      		rjmp .L6
 280               	.L5:
 163:FreeRTOS/Source/list.c **** 	}
 164:FreeRTOS/Source/list.c **** 	else
 165:FreeRTOS/Source/list.c **** 	{
 166:FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 167:FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are
 168:FreeRTOS/Source/list.c **** 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
 169:FreeRTOS/Source/list.c **** 		more tips, and ensure configASSERT() is defined!
 170:FreeRTOS/Source/list.c **** 		http://www.freertos.org/a00110.html#configASSERT
 171:FreeRTOS/Source/list.c **** 
 172:FreeRTOS/Source/list.c **** 			1) Stack overflow -
 173:FreeRTOS/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 174:FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 175:FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 176:FreeRTOS/Source/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 177:FreeRTOS/Source/list.c **** 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 178:FreeRTOS/Source/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 179:FreeRTOS/Source/list.c **** 			   http://www.freertos.org/a00110.html
 180:FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 181:FreeRTOS/Source/list.c **** 			   the scheduler is suspended, or calling an API function that does
 182:FreeRTOS/Source/list.c **** 			   not end in "FromISR" from an interrupt.
 183:FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 184:FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 185:FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 186:FreeRTOS/Source/list.c **** 		**********************************************************************/
 187:FreeRTOS/Source/list.c **** 
 188:FreeRTOS/Source/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 282               	.LM21:
 283 0086 D801      		movw r26,r16
 284 0088 1396      		adiw r26,3
 285 008a 00C0      		rjmp .L7
 286               	.L8:
 287 008c D901      		movw r26,r18
 288               	.L7:
 290               	.LM22:
 291 008e 1296      		adiw r26,2
 292 0090 2D91      		ld r18,X+
 293 0092 3C91      		ld r19,X
 294 0094 1397      		sbiw r26,2+1
 295 0096 E901      		movw r28,r18
 296 0098 4881      		ld r20,Y
 297 009a 5981      		ldd r21,Y+1
 298 009c 8417      		cp r24,r20
 299 009e 9507      		cpc r25,r21
 300 00a0 00F4      		brsh .L8
 301               	.L6:
 189:FreeRTOS/Source/list.c **** 		{
 190:FreeRTOS/Source/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 191:FreeRTOS/Source/list.c **** 			insertion position. */
 192:FreeRTOS/Source/list.c **** 		}
 193:FreeRTOS/Source/list.c **** 	}
 194:FreeRTOS/Source/list.c **** 
 195:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 303               	.LM23:
 304 00a2 1296      		adiw r26,2
 305 00a4 8D91      		ld r24,X+
 306 00a6 9C91      		ld r25,X
 307 00a8 1397      		sbiw r26,2+1
 308 00aa 9383      		std Z+3,r25
 309 00ac 8283      		std Z+2,r24
 196:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 311               	.LM24:
 312 00ae EC01      		movw r28,r24
 313 00b0 FD83      		std Y+5,r31
 314 00b2 EC83      		std Y+4,r30
 197:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 316               	.LM25:
 317 00b4 B583      		std Z+5,r27
 318 00b6 A483      		std Z+4,r26
 198:FreeRTOS/Source/list.c **** 	pxIterator->pxNext = pxNewListItem;
 320               	.LM26:
 321 00b8 1396      		adiw r26,2+1
 322 00ba FC93      		st X,r31
 323 00bc EE93      		st -X,r30
 324 00be 1297      		sbiw r26,2
 199:FreeRTOS/Source/list.c **** 
 200:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 201:FreeRTOS/Source/list.c **** 	item later. */
 202:FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 326               	.LM27:
 327 00c0 1187      		std Z+9,r17
 328 00c2 0087      		std Z+8,r16
 203:FreeRTOS/Source/list.c **** 
 204:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 330               	.LM28:
 331 00c4 F801      		movw r30,r16
 332 00c6 8081      		ld r24,Z
 333 00c8 8F5F      		subi r24,lo8(-(1))
 334 00ca 8083      		st Z,r24
 335               	/* epilogue start */
 205:FreeRTOS/Source/list.c **** }
 337               	.LM29:
 338 00cc DF91      		pop r29
 339 00ce CF91      		pop r28
 340 00d0 1F91      		pop r17
 341 00d2 0F91      		pop r16
 342 00d4 0895      		ret
 347               	.Lscope4:
 349               		.stabd	78,0,0
 352               	.global	uxListRemove
 354               	uxListRemove:
 355               		.stabd	46,0,0
 206:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 207:FreeRTOS/Source/list.c **** 
 208:FreeRTOS/Source/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 209:FreeRTOS/Source/list.c **** {
 357               	.LM30:
 358               	.LFBB5:
 359 00d6 CF93      		push r28
 360 00d8 DF93      		push r29
 361               	/* prologue: function */
 362               	/* frame size = 0 */
 363               	/* stack size = 2 */
 364               	.L__stack_usage = 2
 365 00da FC01      		movw r30,r24
 210:FreeRTOS/Source/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 211:FreeRTOS/Source/list.c **** item. */
 212:FreeRTOS/Source/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 367               	.LM31:
 368 00dc A085      		ldd r26,Z+8
 369 00de B185      		ldd r27,Z+9
 213:FreeRTOS/Source/list.c **** 
 214:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 371               	.LM32:
 372 00e0 8281      		ldd r24,Z+2
 373 00e2 9381      		ldd r25,Z+3
 374 00e4 2481      		ldd r18,Z+4
 375 00e6 3581      		ldd r19,Z+5
 376 00e8 EC01      		movw r28,r24
 377 00ea 3D83      		std Y+5,r19
 378 00ec 2C83      		std Y+4,r18
 215:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 380               	.LM33:
 381 00ee C481      		ldd r28,Z+4
 382 00f0 D581      		ldd r29,Z+5
 383 00f2 9B83      		std Y+3,r25
 384 00f4 8A83      		std Y+2,r24
 216:FreeRTOS/Source/list.c **** 
 217:FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 218:FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 386               	.LM34:
 387 00f6 1196      		adiw r26,1
 388 00f8 8D91      		ld r24,X+
 389 00fa 9C91      		ld r25,X
 390 00fc 1297      		sbiw r26,1+1
 391 00fe 8E17      		cp r24,r30
 392 0100 9F07      		cpc r25,r31
 393 0102 01F4      		brne .L10
 219:FreeRTOS/Source/list.c **** 	{
 220:FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 395               	.LM35:
 396 0104 1296      		adiw r26,1+1
 397 0106 DC93      		st X,r29
 398 0108 CE93      		st -X,r28
 399 010a 1197      		sbiw r26,1
 400               	.L10:
 221:FreeRTOS/Source/list.c **** 	}
 222:FreeRTOS/Source/list.c **** 	else
 223:FreeRTOS/Source/list.c **** 	{
 224:FreeRTOS/Source/list.c **** 		mtCOVERAGE_TEST_MARKER();
 225:FreeRTOS/Source/list.c **** 	}
 226:FreeRTOS/Source/list.c **** 
 227:FreeRTOS/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 402               	.LM36:
 403 010c 1186      		std Z+9,__zero_reg__
 404 010e 1086      		std Z+8,__zero_reg__
 228:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 406               	.LM37:
 407 0110 8C91      		ld r24,X
 408 0112 8150      		subi r24,lo8(-(-1))
 409 0114 8C93      		st X,r24
 410               	/* epilogue start */
 229:FreeRTOS/Source/list.c **** 
 230:FreeRTOS/Source/list.c **** 	return pxList->uxNumberOfItems;
 231:FreeRTOS/Source/list.c **** }
 412               	.LM38:
 413 0116 DF91      		pop r29
 414 0118 CF91      		pop r28
 415 011a 0895      		ret
 420               	.Lscope5:
 422               		.stabd	78,0,0
 424               	.Letext0:
 425               		.ident	"GCC: (GNU) 4.7.2"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
     /tmp/ccY4L99E.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccY4L99E.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccY4L99E.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccY4L99E.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccY4L99E.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccY4L99E.s:113    .text:0000000000000000 vListInitialise
     /tmp/ccY4L99E.s:154    .text:000000000000001c vListInitialiseItem
     /tmp/ccY4L99E.s:178    .text:0000000000000024 vListInsertEnd
     /tmp/ccY4L99E.s:249    .text:0000000000000066 vListInsert
     /tmp/ccY4L99E.s:354    .text:00000000000000d6 uxListRemove

NO UNDEFINED SYMBOLS
