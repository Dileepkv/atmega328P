   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 127               		.section	.rodata.str1.1,"aMS",@progbits,1
 128               	.LC0:
 129 0000 6865 6C6C 		.string	"hello"
 129      6F00 
 130               		.text
 134               	vSerial:
 135               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        ****  * Header file inclusions.
   3:main.c        ****  ******************************************************************************/
   4:main.c        **** 
   5:main.c        **** #include "FreeRTOS.h"
   6:main.c        **** #include "task.h"
   7:main.c        **** 
   8:main.c        **** #include <avr/io.h>
   9:main.c        **** 
  10:main.c        **** 
  11:main.c        **** #include <stdio.h>
  12:main.c        **** #include "uart.h"
  13:main.c        **** 
  14:main.c        **** /******************************************************************************
  15:main.c        ****  * Private macro definitions.
  16:main.c        ****  ******************************************************************************/
  17:main.c        **** 
  18:main.c        **** #define mainLED_TASK_PRIORITY   (tskIDLE_PRIORITY)
  19:main.c        **** 
  20:main.c        **** #define mainSERIAL_TASK_PRIORITY 2
  21:main.c        **** 
  22:main.c        **** /******************************************************************************
  23:main.c        ****  * Private function prototypes.
  24:main.c        ****  ******************************************************************************/
  25:main.c        **** 
  26:main.c        **** static void vBlinkLed(void* pvParameters);
  27:main.c        **** 
  28:main.c        **** static void vSerial(void* pvParameters);
  29:main.c        **** 
  30:main.c        **** /******************************************************************************
  31:main.c        ****  * Public function definitions.
  32:main.c        ****  ******************************************************************************/
  33:main.c        **** 
  34:main.c        **** /**************************************************************************//**
  35:main.c        ****  * \fn int main(void)
  36:main.c        ****  *
  37:main.c        ****  * \brief Main function.
  38:main.c        ****  *
  39:main.c        ****  * \return
  40:main.c        ****  ******************************************************************************/
  41:main.c        **** int main(void)
  42:main.c        **** {
  43:main.c        ****     // Create task.
  44:main.c        ****     xTaskHandle blink_handle;
  45:main.c        ****     xTaskHandle serial_handle;
  46:main.c        **** 
  47:main.c        ****     xTaskCreate
  48:main.c        ****         (
  49:main.c        ****          vBlinkLed,
  50:main.c        ****          (signed char*)"blink",
  51:main.c        ****          configMINIMAL_STACK_SIZE,
  52:main.c        ****          NULL,
  53:main.c        ****          mainLED_TASK_PRIORITY,
  54:main.c        ****          &blink_handle
  55:main.c        ****         );
  56:main.c        **** 
  57:main.c        ****     xTaskCreate
  58:main.c        ****         (
  59:main.c        ****          vSerial,
  60:main.c        ****          (signed char*)"serial",
  61:main.c        ****          configMINIMAL_STACK_SIZE,
  62:main.c        ****          NULL,
  63:main.c        ****          mainSERIAL_TASK_PRIORITY,
  64:main.c        ****          &serial_handle
  65:main.c        ****         );
  66:main.c        **** 
  67:main.c        ****     // Start scheduler.
  68:main.c        ****     vTaskStartScheduler();
  69:main.c        **** 
  70:main.c        ****     return 0;
  71:main.c        **** }
  72:main.c        **** 
  73:main.c        **** /**************************************************************************//**
  74:main.c        ****  * \fn static vApplicationIdleHook(void)
  75:main.c        ****  *
  76:main.c        ****  * \brief
  77:main.c        ****  ******************************************************************************/
  78:main.c        **** void vApplicationIdleHook(void)
  79:main.c        **** {
  80:main.c        **** 
  81:main.c        **** }
  82:main.c        **** 
  83:main.c        **** /******************************************************************************
  84:main.c        ****  * Private function definitions.
  85:main.c        ****  ******************************************************************************/
  86:main.c        **** 
  87:main.c        **** /**************************************************************************//**
  88:main.c        ****  * \fn static void vBlinkLed(void* pvParameters)
  89:main.c        ****  *
  90:main.c        ****  * \brief
  91:main.c        ****  *
  92:main.c        ****  * \param[in]   pvParameters
  93:main.c        ****  ******************************************************************************/
  94:main.c        **** static void vBlinkLed(void* pvParameters)
  95:main.c        **** {
  96:main.c        ****     DDRB |= _BV(PB5);
  97:main.c        **** 
  98:main.c        ****     for ( ;; )
  99:main.c        ****     {
 100:main.c        ****         PORTB ^= _BV(PB5);
 101:main.c        ****         vTaskDelay(500);
 102:main.c        ****     }
 103:main.c        **** }
 104:main.c        **** 
 105:main.c        **** 
 106:main.c        **** /**************************************************************************//**
 107:main.c        ****  * \fn static void vSerial(void* pvParameters)
 108:main.c        ****  *
 109:main.c        ****  * \brief
 110:main.c        ****  *
 111:main.c        ****  * \param[in]   pvParameters
 112:main.c        ****  ******************************************************************************/
 113:main.c        **** static void vSerial(void* pvParameters)
 114:main.c        **** {
 137               	.LM0:
 138               	.LFBB1:
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
 115:main.c        ****     uart_init();
 144               	.LM1:
 145 0000 0E94 0000 		call uart_init
 116:main.c        ****     stdout = &uart_output;
 147               	.LM2:
 148 0004 80E0      		ldi r24,lo8(uart_output)
 149 0006 90E0      		ldi r25,hi8(uart_output)
 150 0008 9093 0000 		sts __iob+2+1,r25
 151 000c 8093 0000 		sts __iob+2,r24
 117:main.c        ****     stdin = &uart_input;
 153               	.LM3:
 154 0010 80E0      		ldi r24,lo8(uart_input)
 155 0012 90E0      		ldi r25,hi8(uart_input)
 156 0014 9093 0000 		sts __iob+1,r25
 157 0018 8093 0000 		sts __iob,r24
 158               	.L2:
 118:main.c        **** 
 119:main.c        ****     char input;
 120:main.c        **** 
 121:main.c        ****     for ( ;; )
 122:main.c        ****     {
 123:main.c        ****         printf("hello\n");
 160               	.LM4:
 161 001c 80E0      		ldi r24,lo8(.LC0)
 162 001e 90E0      		ldi r25,hi8(.LC0)
 163 0020 0E94 0000 		call puts
 124:main.c        ****         //puts("Hello World");
 125:main.c        ****         //input = getchar();
 126:main.c        ****         //printf("You wrote %c\n", input); 
 127:main.c        ****         vTaskDelay(1000);
 165               	.LM5:
 166 0024 88EE      		ldi r24,lo8(-24)
 167 0026 93E0      		ldi r25,lo8(3)
 168 0028 0E94 0000 		call vTaskDelay
 169 002c 00C0      		rjmp .L2
 171               	.Lscope1:
 173               		.stabd	78,0,0
 177               	vBlinkLed:
 178               		.stabd	46,0,0
  95:main.c        **** {
 180               	.LM6:
 181               	.LFBB2:
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
  96:main.c        ****     DDRB |= _BV(PB5);
 187               	.LM7:
 188 002e 259A      		sbi 0x4,5
 100:main.c        ****         PORTB ^= _BV(PB5);
 190               	.LM8:
 191 0030 C0E2      		ldi r28,lo8(32)
 192               	.L4:
 100:main.c        ****         PORTB ^= _BV(PB5);
 194               	.LM9:
 195 0032 85B1      		in r24,0x5
 196 0034 8C27      		eor r24,r28
 197 0036 85B9      		out 0x5,r24
 101:main.c        ****         vTaskDelay(500);
 199               	.LM10:
 200 0038 84EF      		ldi r24,lo8(-12)
 201 003a 91E0      		ldi r25,lo8(1)
 202 003c 0E94 0000 		call vTaskDelay
 203 0040 00C0      		rjmp .L4
 205               	.Lscope2:
 207               		.stabd	78,0,0
 208               		.section	.rodata.str1.1
 209               	.LC1:
 210 0006 626C 696E 		.string	"blink"
 210      6B00 
 211               	.LC2:
 212 000c 7365 7269 		.string	"serial"
 212      616C 00
 213               		.section	.text.startup,"ax",@progbits
 215               	.global	main
 217               	main:
 218               		.stabd	46,0,0
  42:main.c        **** {
 220               	.LM11:
 221               	.LFBB3:
 222 0000 AF92      		push r10
 223 0002 BF92      		push r11
 224 0004 CF92      		push r12
 225 0006 DF92      		push r13
 226 0008 EF92      		push r14
 227 000a FF92      		push r15
 228 000c 0F93      		push r16
 229 000e CF93      		push r28
 230 0010 DF93      		push r29
 231 0012 00D0      		rcall .
 232 0014 00D0      		rcall .
 233 0016 CDB7      		in r28,__SP_L__
 234 0018 DEB7      		in r29,__SP_H__
 235               	/* prologue: function */
 236               	/* frame size = 4 */
 237               	/* stack size = 13 */
 238               	.L__stack_usage = 13
  47:main.c        ****     xTaskCreate
 240               	.LM12:
 241 001a A12C      		mov r10,__zero_reg__
 242 001c B12C      		mov r11,__zero_reg__
 243 001e C12C      		mov r12,__zero_reg__
 244 0020 D12C      		mov r13,__zero_reg__
 245 0022 83E0      		ldi r24,lo8(3)
 246 0024 E82E      		mov r14,r24
 247 0026 F12C      		mov r15,__zero_reg__
 248 0028 EC0E      		add r14,r28
 249 002a FD1E      		adc r15,r29
 250 002c 00E0      		ldi r16,0
 251 002e 20E0      		ldi r18,0
 252 0030 30E0      		ldi r19,0
 253 0032 45E5      		ldi r20,lo8(85)
 254 0034 50E0      		ldi r21,0
 255 0036 60E0      		ldi r22,lo8(.LC1)
 256 0038 70E0      		ldi r23,hi8(.LC1)
 257 003a 80E0      		ldi r24,lo8(gs(vBlinkLed))
 258 003c 90E0      		ldi r25,hi8(gs(vBlinkLed))
 259 003e 0E94 0000 		call xTaskGenericCreate
  57:main.c        ****     xTaskCreate
 261               	.LM13:
 262 0042 EE24      		clr r14
 263 0044 E394      		inc r14
 264 0046 F12C      		mov r15,__zero_reg__
 265 0048 EC0E      		add r14,r28
 266 004a FD1E      		adc r15,r29
 267 004c 02E0      		ldi r16,lo8(2)
 268 004e 20E0      		ldi r18,0
 269 0050 30E0      		ldi r19,0
 270 0052 45E5      		ldi r20,lo8(85)
 271 0054 50E0      		ldi r21,0
 272 0056 60E0      		ldi r22,lo8(.LC2)
 273 0058 70E0      		ldi r23,hi8(.LC2)
 274 005a 80E0      		ldi r24,lo8(gs(vSerial))
 275 005c 90E0      		ldi r25,hi8(gs(vSerial))
 276 005e 0E94 0000 		call xTaskGenericCreate
  68:main.c        ****     vTaskStartScheduler();
 278               	.LM14:
 279 0062 0E94 0000 		call vTaskStartScheduler
  71:main.c        **** }
 281               	.LM15:
 282 0066 80E0      		ldi r24,0
 283 0068 90E0      		ldi r25,0
 284               	/* epilogue start */
 285 006a 0F90      		pop __tmp_reg__
 286 006c 0F90      		pop __tmp_reg__
 287 006e 0F90      		pop __tmp_reg__
 288 0070 0F90      		pop __tmp_reg__
 289 0072 DF91      		pop r29
 290 0074 CF91      		pop r28
 291 0076 0F91      		pop r16
 292 0078 FF90      		pop r15
 293 007a EF90      		pop r14
 294 007c DF90      		pop r13
 295 007e CF90      		pop r12
 296 0080 BF90      		pop r11
 297 0082 AF90      		pop r10
 298 0084 0895      		ret
 304               	.Lscope3:
 306               		.stabd	78,0,0
 307               		.text
 309               	.global	vApplicationIdleHook
 311               	vApplicationIdleHook:
 312               		.stabd	46,0,0
  79:main.c        **** {
 314               	.LM16:
 315               	.LFBB4:
 316               	/* prologue: function */
 317               	/* frame size = 0 */
 318               	/* stack size = 0 */
 319               	.L__stack_usage = 0
 320 0042 0895      		ret
 322               	.Lscope4:
 324               		.stabd	78,0,0
 325               	.global	uart_input
 326               		.data
 329               	uart_input:
 330 0000 0000 00   		.zero	3
 331 0003 01        		.byte	1
 332 0004 0000 0000 		.zero	4
 333 0008 0000      		.word	0
 334 000a 0000      		.word	gs(uart_getchar)
 335 000c 0000      		.word	0
 336               	.global	uart_output
 339               	uart_output:
 340 000e 0000 00   		.zero	3
 341 0011 02        		.byte	2
 342 0012 0000 0000 		.zero	4
 343 0016 0000      		.word	gs(uart_putchar)
 344 0018 0000      		.word	0
 345 001a 0000      		.word	0
 348               		.text
 350               	.Letext0:
 351               		.ident	"GCC: (GNU) 4.7.2"
 352               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccM2PPsS.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccM2PPsS.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccM2PPsS.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccM2PPsS.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccM2PPsS.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccM2PPsS.s:134    .text:0000000000000000 vSerial
     /tmp/ccM2PPsS.s:339    .data:000000000000000e uart_output
     /tmp/ccM2PPsS.s:329    .data:0000000000000000 uart_input
     /tmp/ccM2PPsS.s:177    .text:000000000000002e vBlinkLed
     /tmp/ccM2PPsS.s:217    .text.startup:0000000000000000 main
     /tmp/ccM2PPsS.s:311    .text:0000000000000042 vApplicationIdleHook

UNDEFINED SYMBOLS
uart_init
__iob
puts
vTaskDelay
xTaskGenericCreate
vTaskStartScheduler
uart_getchar
uart_putchar
__do_copy_data
